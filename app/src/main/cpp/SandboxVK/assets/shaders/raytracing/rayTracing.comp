#version 450
layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#include "definitions.glsl"


layout(column_major, binding = 0) uniform UniformBufferObject {
    vec3 camPos;
    uint currentSample;
    uint numTriangles;
    uint numLights;
    uint numSpheres;
    vec2 screenSize;
    mat4 InvertProjectionView;
} ubo;

layout(binding = 1, rgba8) uniform image2D targetTexture;
layout(binding = 2, rgba32f) uniform image2D targetPosTexture; //w = obj.Id
layout(binding = 3, rgba32f) uniform image2D targetNormalTexture;
layout(binding = 4, rgba32f) uniform image2D targetDepthTexture;

layout(binding = 5, rgba8) uniform image2D accumulationTex;

layout(std430, binding = 6) readonly buffer TriangleBufferObject {
    triangle[] triangles;
 };

 layout(std430, binding = 7) readonly buffer MaterialBufferObject {
    material[] materials;
 };

layout(std430, binding = 8) readonly buffer AabbBufferObject {
    bvhNode[] bvh;
 };

layout(std430, binding = 9) readonly buffer LightsBufferObject {
    light[] lights;
 };


 // Random functions
 #include "random.glsl"

 struct Ray{
    vec3 origin;
    vec3 dir;
    float pdf;
 };

 vec3 ray_at(Ray r, float t) {
    return r.origin + t * r.dir;
}

struct hit_record {
    vec3 p;
    vec3 normal;
    uint materialIndex;
    float t;
    // integer to decrease branches.
    int backFaceInt;
    // PDF of scattering in given direction due to material properties.
    float scatterPdf;
    // PDF of sampling in given direction.
    float samplePdf;

};

vec3 randomOnATriangle(uint triangleIndex) {
    float s = random();
    float t = random();

    vec3 v01 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v1;
    vec3 v02 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v2;
    return triangles[triangleIndex].v0 + s * v01 + t * v02;
}

vec3 sampleLight(vec3 p, inout float pdf, inout float lightCosine) {
    int lightIndex = int(floor(lights.length() * random()));
    vec3 onLight = randomOnATriangle(lights[lightIndex].triangleIndex);
    vec3 toLight = onLight - p;
    float distanceSquared = dot(toLight, toLight);
    toLight = normalize(toLight);
    lightCosine = abs(toLight.y);

    // This assumes that all lights have the same area. 
    // TODO: Calculate probability for arbitrary light area.
    pdf = distanceSquared / (lights.length() * lightCosine * lights[lightIndex].area);

    return toLight;
}

// randomCosScattered 为fragment平面上的一个随机方向
vec3 sampleLambertian(vec3 normal, inout float pdf) {
    onb uvw = Onb(normal);
    vec3 randomCos = random_cosine_direction();
    vec3 randomCosScattered = normalize(onbLocal(randomCos, uvw));
    float cosine = dot(normalize(normal), randomCosScattered);
    pdf = max(0.01, cosine)/pi;
    
    return randomCosScattered;
}

vec3 sampleMetal(vec3 I, vec3 normal, inout float pdf) {
    pdf = 1;
    return reflect(I, normal);
}

vec3 sampleGlass(vec3 I, hit_record rec, inout float pdf) {
    pdf = 1;
    float ir = 1.5;
    float refraction_ratio = (1 - rec.backFaceInt) * 1.0/ir + rec.backFaceInt * ir; 
    vec3 i = normalize(I);
    float cos_theta = min(dot(-i, rec.normal), 1.0);
    float sin_theta = sqrt(1.0 - cos_theta*cos_theta);
    float t = floor(clamp(refraction_ratio * sin_theta, 0, 1));

    return t*reflect(i, rec.normal) + (1-t)*refract(i, rec.normal, refraction_ratio);
}

bool scatter(Ray r_in, inout hit_record rec, inout vec3 albedo, inout Ray scattered) {    
    albedo = materials[rec.materialIndex].albedo;

    //出射方向 ray的颜色占比
    float outRayPdf;
    vec3 outDir;

    if(materials[rec.materialIndex].materialType == RTX_DIFFUSE) {
        outDir = sampleLambertian(rec.normal, outRayPdf);
    }
    else if(materials[rec.materialIndex].materialType == RTX_METALLIC) {
        outDir = sampleMetal(r_in.dir, rec.normal, outRayPdf);
    }
    else if(materials[rec.materialIndex].materialType == RTX_DIELECTRIC) {
        outDir = sampleGlass(r_in.dir, rec, outRayPdf);
        albedo = vec3(1.0);
    }
    float lightPdf = outRayPdf; 
    vec3 finalOutDir = outDir;

    if (random() < 0.5 && materials[rec.materialIndex].materialType == RTX_DIFFUSE) {
        // sample light, 0.5的概率射向光源
        float lightCosine;
        finalOutDir = sampleLight(rec.p, lightPdf, lightCosine);

        if(abs(lightCosine) < 0.001) {
            finalOutDir = outDir;
            lightPdf = outRayPdf;
        }
        scattered = Ray(rec.p, finalOutDir, lightPdf);

    }else{
        scattered = Ray(rec.p, finalOutDir, outRayPdf);

    }

    
    // rec.samplePdf = 0.5 * outRayPdf + 0.5 *lightSamplePdf;
    // rec.scatterPdf = outRayPdf;

    if(materials[rec.materialIndex].materialType == RTX_EMISSION)
    {
        albedo = materials[rec.materialIndex].albedo;

        //albedo = r_in.pdf * materials[rec.materialIndex].albedo;

    }else{
       // albedo *= r_in.pdf;
    }
    return materials[rec.materialIndex].materialType == RTX_EMISSION;
}


bool triIntersectNew( in vec3 ro, in vec3 rd, triangle tri, inout vec3 n ,inout float t)
{

    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v1;
    n = cross( a, b );

    t = dot((tri.v0 - ro),n) / dot(rd,n);
    if(t <0.0 || t > 10000.0)
        return false;
    vec3 q = ro + t * rd;
    
    vec3 ab = tri.v1 - tri.v0;
    vec3 bc = tri.v2 - tri.v1;
    vec3 ca = tri.v0 - tri.v2;

    vec3 aq = q - tri.v0;
    vec3 bq = q - tri.v1;
    vec3 cq = q - tri.v2;
    vec3 t0 = cross(ab, aq);
    vec3 t1 = cross(bc, bq);
    vec3 t2 = cross(ca, cq);
    float ret_0 = dot(t0, t1);
    float ret_1 = dot(t1, t2);
    float ret_2 = dot(t2, t0);
    // 3. 使用点乘判断叉乘结果是否同向
    if (ret_0 < 0 || ret_1 < 0 || ret_2 < 0) return false;
    
    return true;

}


vec3 triIntersect( in vec3 ro, in vec3 rd, triangle tri, inout vec3 n )
{
    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v0;
    vec3 p = tri.v0 - ro;
    n = cross( b, a );

    vec3 q = cross( p, rd );

    float idet = 1.0/dot( rd, n );

    float u = dot( q, b )*idet;
    float v = dot( q, a )*idet;
    float t = dot( n, p )*idet;

    return vec3( t, u, v );
}

// bool hit_sphere(int sphere_index, Ray r, float tMin, float tMax, inout hit_record rec) {
//     vec3 center = spheres[sphere_index].s.xyz;
//     float radius = spheres[sphere_index].s.w;

//     float dir_l = r.dir.length();
    
//     vec3 oc = r.origin - center;
//     float a = dot(r.dir, r.dir);
//     float half_b = dot(oc, r.dir);
//     float c = dot(oc, oc) - radius*radius;

//     float discriminant = half_b*half_b - a*c;
//     if (discriminant < 0) return false;
//     float sqrtd = sqrt(discriminant);
//     rec.backFaceInt = 0;
//     // Find the nearest root that lies in the acceptable range.
//     float root = (-half_b - sqrtd) / a;
//     if (root < tMin || tMax < root) {
//         root = (-half_b + sqrtd) / a;
//         rec.backFaceInt = 1;
//         if (root < tMin || tMax < root)
//             return false;
//     }
//     rec.t = root;
//     rec.p = ray_at(r, rec.t);
//     rec.normal = (1 - 2 * rec.backFaceInt)*(rec.p - center) / radius;
//     rec.materialIndex = spheres[sphere_index].materialIndex;
//     return true;
// }

bool hit_triangle(int triangle_index, Ray r, float tMin, float tMax, inout hit_record rec) {
    triangle tri = triangles[triangle_index];
    vec3 n = vec3(0,0,0);
   
    float t;
    if(triIntersectNew(r.origin, r.dir, tri, n, t)){
        rec.p = r.origin + t * r.dir;
        rec.normal =  normalize(n);
        rec.backFaceInt = dot(r.dir,rec.normal) > 0 ? 1 : 0;
        rec.normal *=  1 - 2 * rec.backFaceInt;
        rec.p +=  rec.normal*0.0001;
        rec.t = t;
        rec.materialIndex = tri.materialIndex;
        
        imageStore(targetPosTexture, ivec2(gl_GlobalInvocationID.xy), vec4(rec.p,float(tri.objIndex)));
        imageStore(targetNormalTexture, ivec2(gl_GlobalInvocationID.xy), vec4(rec.normal,1.0));

        return true;
    }
    return false;
   // return false;
}

bool hit_scene(Ray r, inout hit_record rec) {
    float t_min = 0.001;
    float t_max = 10000;

    hit_record temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    for (int i = 0; i<ubo.numTriangles; i++) {
        if (hit_triangle(i, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }
    closest_so_far = t_max;

  /*  for (int j = 0; j<spheres.length(); j++) {
        if (hit_sphere(j, r, t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }
  */

    return hit_anything;
}

// no intersection means vec.x > vec.y (really tNear > tFar)
vec2 intersectAABB(Ray r, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - r.origin) / r.dir;
    vec3 tMax = (boxMax - r.origin) / r.dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

// Works only for triangles, no spheres yet.
// TODO: extend for spheres.
#define MAX_STACK_DEPTH 20
bool hit_bvh(Ray r, inout hit_record rec, inout int nodeId, inout int triId) {
    float t_min = 0.001;
    float t_max = 10000;

    bool hit_anything = false;
    float closest_so_far = t_max;
    
    //Since shader doesn't have a stack structure, implementing it with an array and a counter.
    int nodeStack[MAX_STACK_DEPTH];
    int stackIndex = 0;

    // Traversing a flattened bvh using a stack.
    // nodeStack[stackIndex] contains an index of AABB in bhv[]
    // bvh[nodeStack[stackIndex]] is an index of a triangle in triangles.
    nodeStack[stackIndex] = 0;
    stackIndex++;
    int hticnt = 0;
    while (stackIndex>0 && stackIndex < MAX_STACK_DEPTH) {
        stackIndex--;
        int currentNode = nodeStack[stackIndex];
        if(currentNode == -1) continue;

        vec2 tIntersect = intersectAABB(r, bvh[currentNode].min, bvh[currentNode].max);
        if (tIntersect.x > tIntersect.y) continue;
        hticnt++;
        // Idndex of triangle in current node.
        int ti = bvh[currentNode].objectIndex;
        if(ti != -1){
            hit_record temp_rec;
            //hit_anything = true;
            nodeId = currentNode;
            triId = ti;
            if (hit_triangle(ti, r, t_min, closest_so_far, temp_rec)) {
                hit_anything = true;
                closest_so_far = temp_rec.t;
                rec = temp_rec;
            }
           
        }
         //if(hticnt>=15){
         //hit_anything = true;
           // break;
        // }
        // Pushing both left unto the stack even if they are -1 to reduce branches. 
        // if (bvh[currentNode].leftNodeIndex != -1) {
        nodeStack[stackIndex] = bvh[currentNode].leftNodeIndex;
        stackIndex++;
        //}
        // if (bvh[currentNode].rightNodeIndex != -1) {
        nodeStack[stackIndex] = bvh[currentNode].rightNodeIndex;
        stackIndex++;
        //}
    }
    
    return hit_anything;
}



 #define NUM_BOUNCES 2

vec3 TraceRay(Ray r){
    vec3 unit_direction = normalize(r.dir);
    hit_record rec;

    vec3 final_color = vec3(1.0);
    Ray current_ray = {r.origin, normalize(r.dir), r.pdf};
    bool bhit = false;
    for (int i = 0; i < NUM_BOUNCES; i++) {
        int nodeId;
        int triId;
        if (hit_bvh(current_ray, rec, nodeId, triId)) {
            vec3 albedo;
            bool emits = scatter(current_ray, rec, albedo, current_ray);
            final_color *= albedo;
            bhit = true;
            if (emits) {
                break;
            }            
        } else {
            final_color *=  vec3(0,0,0);
            
            break;

        }
    }

    if(!bhit){
        imageStore(targetPosTexture, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(0),-1.0));
        imageStore(targetNormalTexture, ivec2(gl_GlobalInvocationID.xy), vec4(0.0));
    }
    return final_color;
}


void main(){


    vec2 uv = vec2(gl_GlobalInvocationID.x/ubo.screenSize.x,gl_GlobalInvocationID.y/ubo.screenSize.y);
    uv.x = 1-uv.x;
    uv.y = 1-uv.y;

    uv = (uv - 0.5)*2;
    vec4 end = (ubo.InvertProjectionView) * vec4(uv,1.0,1.0);

    vec3 dir = normalize(end.xyz-ubo.camPos.xyz);
    Ray r = {ubo.camPos.xyz, dir, 1.0};
    


    vec3 color = TraceRay(r);

    vec4 currentColor = imageLoad(accumulationTex, ivec2(gl_GlobalInvocationID.xy)).rgba * min(ubo.currentSample, 1.0);

    vec4 to_write ;
    //if (ubo.currentSample == 1) {
    //    to_write = vec4(color, 1.0);
    //}else{
    //    to_write = (vec4(color, 1.0) + currentColor*(ubo.currentSample)) / (ubo.currentSample+1.0);
    //}
     to_write = (vec4(color, 1.0) + currentColor*(ubo.currentSample)) / (ubo.currentSample+1.0);
    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), to_write);




}




